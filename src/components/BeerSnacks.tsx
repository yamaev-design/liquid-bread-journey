import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ThumbsUp, Fish, Nut, Cookie, Beef, Pizza } from "lucide-react";
import beerSnacksImage from "@/assets/beer-snacks.jpg";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface Snack {
  id: number;
  name: string;
  description: string;
  icon: any;
  pros: string[];
  cons: string[];
  bestWith: string;
  votes: number;
}

const snacks: Snack[] = [
  {
    id: 1,
    name: "–°—É—Ö–∞—Ä–∏–∫–∏",
    description: "–ö–ª–∞—Å—Å–∏–∫–∞ –ø–∏–≤–Ω—ã—Ö –ø–æ—Å–∏–¥–µ–ª–æ–∫. –•—Ä—É—Å—Ç—è—â–∏–µ, —Å–æ–ª—ë–Ω—ã–µ, —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –≤–∫—É—Å–∞–º–∏.",
    icon: Cookie,
    pros: ["–î–æ—Å—Ç—É–ø–Ω—ã –≤–µ–∑–¥–µ", "–ú–Ω–æ–≥–æ –≤–∫—É—Å–æ–≤", "–î–æ–ª–≥–æ —Ö—Ä–∞–Ω—è—Ç—Å—è"],
    cons: ["–ú–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —Å–æ–ª—ë–Ω—ã–º–∏", "–ë—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è"],
    bestWith: "–°–≤–µ—Ç–ª–æ–µ –ø–∏–≤–æ, –ª–∞–≥–µ—Ä",
    votes: 0
  },
  {
    id: 2,
    name: "–û—Ä–µ—à–∫–∏",
    description: "–°–æ–ª—ë–Ω—ã–π –∞—Ä–∞—Ö–∏—Å, —Ñ–∏—Å—Ç–∞—à–∫–∏ –∏–ª–∏ –º–∏–Ω–¥–∞–ª—å ‚Äî –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –∏ –≤–∫—É—Å–Ω–∞—è –∑–∞–∫—É—Å–∫–∞.",
    icon: Nut,
    pros: ["–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ", "–ú–Ω–æ–≥–æ –±–µ–ª–∫–∞", "–°—ã—Ç–Ω—ã–µ"],
    cons: ["–í—ã—Å–æ–∫–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å", "–í–æ–∑–º–æ–∂–Ω–∞ –∞–ª–ª–µ—Ä–≥–∏—è"],
    bestWith: "–≠–ª—å, IPA, —Ç—ë–º–Ω–æ–µ –ø–∏–≤–æ",
    votes: 0
  },
  {
    id: 3,
    name: "–°—É—à—ë–Ω–∞—è –∏ –≤—è–ª–µ–Ω–∞—è —Ä—ã–±–∞",
    description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –∑–∞–∫—É—Å–∫–∞. –¢–∞—Ä–∞–Ω–∫–∞, –≤–æ–±–ª–∞, –∞–Ω—á–æ—É—Å—ã.",
    icon: Fish,
    pros: ["–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–∫—É—Å–∫–∞", "–ë–æ–≥–∞—Ç–∞ –±–µ–ª–∫–æ–º", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∫—É—Å"],
    cons: ["–°–∏–ª—å–Ω—ã–π –∑–∞–ø–∞—Ö", "–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∫—É—Å", "–ö–æ—Å—Ç–∏"],
    bestWith: "–°–≤–µ—Ç–ª–æ–µ –ø–∏–≤–æ, –ø–∏–ª–∑–Ω–µ—Ä",
    votes: 0
  },
  {
    id: 4,
    name: "–ú—è—Å–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏",
    description: "–ö–æ–ª–±–∞—Å–∫–∏, —Å–Ω–µ–∫–∏, –≤—è–ª–µ–Ω–æ–µ –º—è—Å–æ, –æ—Ö–æ—Ç–Ω–∏—á—å–∏ –∫–æ–ª–±–∞—Å–∫–∏.",
    icon: Beef,
    pros: ["–°—ã—Ç–Ω—ã–µ", "–•–æ—Ä–æ—à–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è", "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ"],
    cons: ["–î–æ—Ä–æ–≥–∏–µ", "–ö–∞–ª–æ—Ä–∏–π–Ω—ã–µ", "–ë—ã—Å—Ç—Ä–æ –ø–æ—Ä—Ç—è—Ç—Å—è"],
    bestWith: "–¢—ë–º–Ω–æ–µ –ø–∏–≤–æ, —Å—Ç–∞—É—Ç, –ø–æ—Ä—Ç–µ—Ä",
    votes: 0
  },
  {
    id: 5,
    name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ —á–∏–ø—Å—ã",
    description: "–¢–æ–Ω–∫–∏–µ, —Ö—Ä—É—Å—Ç—è—â–∏–µ, —Å–æ–ª—ë–Ω—ã–µ. –í—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π.",
    icon: Pizza,
    pros: ["–•—Ä—É—Å—Ç—è—â–∏–µ", "–ú–Ω–æ–≥–æ –≤–∫—É—Å–æ–≤", "–ë—ã—Å—Ç—Ä–æ –µ–¥—è—Ç—Å—è"],
    cons: ["–ù–µ–ø–æ–ª–µ–∑–Ω—ã–µ", "–ñ–∏—Ä–Ω—ã–µ", "–ë—ã—Å—Ç—Ä–æ —Ä–∞–∑–º–æ–∫–∞—é—Ç"],
    bestWith: "–õ—é–±–æ–µ —Å–≤–µ—Ç–ª–æ–µ –ø–∏–≤–æ",
    votes: 0
  }
];

const BeerSnacks = () => {
  const [snackVotes, setSnackVotes] = useState(snacks);
  const [selectedSnack, setSelectedSnack] = useState<number | null>(null);
  const [userVoted, setUserVoted] = useState(false);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  // Load snacks from database
  useEffect(() => {
    loadSnacks();
    checkIfVoted();
  }, []);

  const loadSnacks = async () => {
    const { data, error } = await supabase
      .from('snacks')
      .select('*')
      .order('id');
    
    if (data && !error) {
      const updatedSnacks = snacks.map(snack => {
        const dbSnack = data.find(d => d.id === snack.id);
        return dbSnack ? { ...snack, votes: dbSnack.votes } : snack;
      });
      setSnackVotes(updatedSnacks);
    }
  };

  const checkIfVoted = async () => {
    // Check localStorage first for client-side persistence
    const voted = localStorage.getItem('beer_snack_voted');
    if (voted) {
      setUserVoted(true);
      setSelectedSnack(parseInt(voted));
    }
  };

  const handleVote = async (id: number) => {
    if (userVoted || loading) return;
    
    setLoading(true);
    try {
      const response = await supabase.functions.invoke('vote-snack', {
        body: { snackId: id }
      });

      if (response.error) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: response.error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å",
          variant: "destructive"
        });
        return;
      }

      if (response.data?.error) {
        toast({
          title: "–£–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏",
          description: response.data.error,
          variant: "destructive"
        });
        return;
      }

      // Update local state with fresh data from server
      if (response.data?.snacks) {
        const updatedSnacks = snacks.map(snack => {
          const dbSnack = response.data.snacks.find((d: any) => d.id === snack.id);
          return dbSnack ? { ...snack, votes: dbSnack.votes } : snack;
        });
        setSnackVotes(updatedSnacks);
      }

      setUserVoted(true);
      setSelectedSnack(id);
      localStorage.setItem('beer_snack_voted', id.toString());
      
      toast({
        title: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!",
        description: "–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω"
      });
    } catch (error) {
      console.error('Vote error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const resetVotes = () => {
    localStorage.removeItem('beer_snack_voted');
    setUserVoted(false);
    setSelectedSnack(null);
    loadSnacks();
  };

  const totalVotes = snackVotes.reduce((sum, snack) => sum + snack.votes, 0);
  const sortedSnacks = [...snackVotes].sort((a, b) => b.votes - a.votes);

  return (
    <section id="snacks" className="py-20 px-6 bg-gradient-to-b from-card to-background relative overflow-hidden">
      {/* Background decorative image */}
      <div className="absolute top-1/2 right-0 w-1/3 h-96 opacity-10 pointer-events-none -translate-y-1/2">
        <img src={beerSnacksImage} alt="" className="w-full h-full object-cover rounded-l-3xl" />
      </div>

      <div className="max-w-7xl mx-auto relative z-10">
        <div className="text-center mb-16 animate-fade-in">
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-4 text-primary">
            –ë–∏—Ç–≤–∞ –∑–∞–∫—É—Å–æ–∫ –∫ –ø–∏–≤—É
          </h2>
          <p className="text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto mb-6">
            –ò–∑–≤–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å: —á—Ç–æ –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –ø–∏–≤—É? –ü—Ä–æ–≥–æ–ª–æ—Å—É–π –∑–∞ —Å–≤–æ—é –ª—é–±–∏–º—É—é –∑–∞–∫—É—Å–∫—É!
          </p>
          {userVoted && (
            <div className="flex items-center justify-center gap-4 mb-4">
              <p className="text-accent font-semibold">
                ‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å! –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {totalVotes}
              </p>
              <Button 
                onClick={resetVotes}
                variant="outline"
                size="sm"
                className="hover:scale-105 transition-transform"
              >
                üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
              </Button>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
          {sortedSnacks.map((snack, index) => {
            const Icon = snack.icon;
            const isSelected = selectedSnack === snack.id;
            const votePercentage = totalVotes > 0 ? Math.round((snack.votes / totalVotes) * 100) : 0;
            const isLeader = index === 0 && snack.votes > 0;

            return (
              <Card
                key={snack.id}
                className={`shadow-warm hover:shadow-glow transition-all duration-300 hover:scale-105 cursor-pointer animate-fade-in relative overflow-hidden ${
                  isSelected ? 'ring-2 ring-primary scale-105' : ''
                } ${isLeader ? 'border-2 border-primary' : ''}`}
                style={{ animationDelay: `${index * 0.1}s` }}
                onClick={() => handleVote(snack.id)}
              >
                {isLeader && (
                  <div className="absolute top-2 right-2 bg-gradient-amber text-foreground px-3 py-1 rounded-full text-xs font-bold shadow-warm z-10">
                    üëë –õ–∏–¥–µ—Ä
                  </div>
                )}

                {userVoted && (
                  <div className="absolute top-0 left-0 right-0 h-2 bg-muted/30">
                    <div 
                      className="h-full gradient-amber transition-all duration-500"
                      style={{ width: `${votePercentage}%` }}
                    />
                  </div>
                )}

                <CardHeader>
                  <div className="w-16 h-16 bg-gradient-amber rounded-full flex items-center justify-center mb-4 shadow-warm">
                    <Icon className="w-8 h-8 text-primary-foreground" />
                  </div>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-2xl">{snack.name}</CardTitle>
                    {userVoted && (
                      <span className="text-sm font-bold text-primary">
                        {votePercentage}%
                      </span>
                    )}
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground mb-4 leading-relaxed">
                    {snack.description}
                  </p>

                  <div className="space-y-3 mb-4">
                    <div>
                      <p className="text-xs font-semibold text-green-600 dark:text-green-400 mb-1">
                        ‚úÖ –ü–ª—é—Å—ã:
                      </p>
                      <ul className="text-xs text-muted-foreground space-y-1">
                        {snack.pros.map((pro, i) => (
                          <li key={i}>‚Ä¢ {pro}</li>
                        ))}
                      </ul>
                    </div>

                    <div>
                      <p className="text-xs font-semibold text-red-600 dark:text-red-400 mb-1">
                        ‚ùå –ú–∏–Ω—É—Å—ã:
                      </p>
                      <ul className="text-xs text-muted-foreground space-y-1">
                        {snack.cons.map((con, i) => (
                          <li key={i}>‚Ä¢ {con}</li>
                        ))}
                      </ul>
                    </div>

                    <div className="pt-2 border-t border-border">
                      <p className="text-xs font-semibold text-accent mb-1">
                        üç∫ –õ—É—á—à–µ –≤—Å–µ–≥–æ —Å:
                      </p>
                      <p className="text-xs text-muted-foreground italic">
                        {snack.bestWith}
                      </p>
                    </div>
                  </div>

                  {!userVoted && (
                    <Button 
                      className="w-full gradient-amber text-foreground font-semibold shadow-warm hover:shadow-glow transition-all"
                      onClick={() => handleVote(snack.id)}
                      disabled={loading}
                    >
                      <ThumbsUp className="w-4 h-4 mr-2" />
                      {loading ? '–ì–æ–ª–æ—Å—É—é...' : '–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å'}
                    </Button>
                  )}

                  {userVoted && (
                    <div className="flex items-center justify-center gap-2 text-sm">
                      <ThumbsUp className="w-4 h-4 text-primary" />
                      <span className="font-semibold text-primary">
                        {snack.votes} {snack.votes === 1 ? '–≥–æ–ª–æ—Å' : '–≥–æ–ª–æ—Å–æ–≤'}
                      </span>
                    </div>
                  )}
                </CardContent>
              </Card>
            );
          })}
        </div>

        <Card className="shadow-warm bg-gradient-to-br from-accent/10 to-primary/10">
          <CardContent className="p-8 text-center">
            <h3 className="text-2xl font-bold mb-4 text-foreground">
              üí° –ó–æ–ª–æ—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∑–∞–∫—É—Å–æ–∫ –∫ –ø–∏–≤—É
            </h3>
            <p className="text-muted-foreground leading-relaxed max-w-3xl mx-auto mb-4">
              –õ—É—á—à–∞—è –∑–∞–∫—É—Å–∫–∞ ‚Äî —Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –≤–∫—É—Å –ø–∏–≤–∞, –∞ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ. 
              –°–æ–ª—ë–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞—é—Ç –≥–æ—Ä–µ—á—å —Ö–º–µ–ª—è, –∂–∏—Ä–Ω—ã–µ ‚Äî —Å–º—è–≥—á–∞—é—Ç –µ—ë. 
              –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!
            </p>
            <p className="text-sm text-accent font-semibold">
              –ü–æ–º–Ω–∏: –∑–∞–∫—É—Å–∫–∞ —Å–æ–∑–¥–∞—ë—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —ç—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –∏ —Å–∞–º –Ω–∞–ø–∏—Ç–æ–∫ üçª
            </p>
          </CardContent>
        </Card>
      </div>
    </section>
  );
};

export default BeerSnacks;
